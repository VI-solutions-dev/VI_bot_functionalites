<?xml version="1.0"?>
<launch>
  <!-- =============== ARGS =============== -->
  <arg name="model"                default="dd_robot6.urdf"/>
  <arg name="use_rtabmapviz"       default="true"/>
  <!-- Disable visual odometry by default. VO is unreliable indoors with a single
       camera; rely on wheel/EKF odometry instead. -->
  <arg name="use_vo"               default="false"/>
  <arg name="use_ekf"              default="true"/>
  <arg name="virtual_scan"         default="true"/>
  <arg name="rviz_config"          default="$(find robot_diff)/urdf.rviz"/>
  <arg name="db_path"              default="$(env HOME)/.ros/rtabmap.db"/>

  <!-- =========== ROBOT DESCRIPTION =========== -->
  <param name="robot_description" textfile="$(find robot_diff)/urdf/$(arg model)"/>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <!-- Relay RTAB-Map grid to /map for the global costmap -->
  <node pkg="topic_tools" type="relay" name="grid_map_relay" output="screen"
        args="/rtabmap/grid_map /map" />

  <!-- Static TF base_link -> camera_link (x y z R P Y) -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="cam_tf"
        args="0.2 0.0 0.1 0 0 0 base_link camera_link"/>

  <!-- diff_tf disabled (EKF publishes odom->base_link) -->
  <node pkg="robot_diff" type="diff_tf.py" name="diff_tf" output="screen">
    <param name="publish_tf" value="false"/>
  </node>

  <!-- Trajectory viz (optional) -->
  <node name="robot_trajectory_visualization"
        pkg="robot_diff"
        type="trajectory_visualization.py"
        output="screen"/>

  <!-- Rosbridge (optional) -->
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">
    <arg name="port" value="9090"/>
  </include>

  <!-- RViz -->
  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(arg rviz_config)"
        required="true" />

  <!-- Use real time (set true only when replaying bags with -clock) -->
  <param name="use_sim_time" value="false"/>

  <!-- =========== VISUAL ODOMETRY (VO -> /vo) =========== -->
  <group if="$(arg use_vo)">
    <node pkg="rtabmap_odom" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <!-- Frames & TF -->
      <param name="frame_id" value="base_footprint"/>
      <param name="odom_frame_id" value="odom_vo"/>
      <param name="publish_tf" value="false"/>

      <!-- Robust, sane VO thresholds (too-high inliers cause resets) -->
      <param name="Odom/GuessMotion" value="true"/>
      <param name="Odom/MinInliers"  value="30"/>
      <param name="Vis/MinInliers"   value="30"/>
      <param name="Kp/MaxFeatures"   value="1500"/>
      <param name="GFTT/MinDistance" value="12"/>
      <param name="Vis/CorType"      value="1"/>
      <param name="Odom/ResetCountdown" value="100"/>

      <!-- Sync -->
      <param name="approx_sync" value="true"/>
      <param name="approx_sync_max_interval" value="0.05"/>

      <!-- Topics (use rectified RGB + registered depth) -->
      <remap from="odom"           to="/vo"/>
      <remap from="rgb/image"      to="/camera/rgb/image_rect_color"/>
      <remap from="depth/image"    to="/camera/depth_registered/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
    </node>
  </group>

  <!-- ================ EKF (publishes /odom) ================ -->
  <group if="$(arg use_ekf)">
    <node pkg="robot_localization"
          type="ekf_localization_node"
          name="ekf_odom"
          output="screen">
      <!-- EKF publishes odometry/filtered -> /odom (single /odom publisher) -->
      <remap from="odometry/filtered" to="/odom"/>
      <rosparam file="$(find robot_diff)/params/ekf.yaml" command="load"/>
    </node>
  </group>

  <!-- ========= RTAB-Map in LOCALISATION mode ========= -->
  <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
    <!-- Camera topics (match VO) -->
    <arg name="rgb_topic"         value="/camera/rgb/image_rect_color"/>
    <arg name="depth_topic"       value="/camera/depth_registered/image_raw"/>
    <arg name="camera_info_topic" value="/camera/rgb/camera_info"/>

    <!-- External odom from EKF -->
    <arg name="icp_odometry" value="false"/>
    <arg name="odom_topic"   value="/odom"/>

    <!-- Frames -->
    <arg name="frame_id"      value="base_link"/>
    <arg name="odom_frame_id" value="odom"/>

    <!-- Sync -->
    <arg name="approx_sync" value="true"/>
    <arg name="queue_size"  value="20"/>

    <!-- DB + viz -->
    <arg name="database_path" value="$(arg db_path)"/>
    <arg name="rtabmapviz"    value="$(arg use_rtabmapviz)"/>

    <!-- Localisation settings: 3-DoF, no new maps on relocalization -->
<arg name="rtabmap_args"
     value="--Mem/IncrementalMemory false \
            --Mem/InitWMWithAllNodes true \
            --Rtabmap/LocalizationMode true \
            --Rtabmap/StartNewMapOnLoopClosure false \
            --RGBD/OptimizeFromGraphEnd true \
            --Reg/Strategy 0 \
            --Reg/Force3DoF true \
            --Optimizer/Slam2D true \
            --Odom/GuessMotion true \
            --Odom/ResetCountdown 1 \
            --Kp/DetectorStrategy 4 \
            --Kp/MaxFeatures 1000 \
            --Vis/FeatureType 4 \
            --Vis/MaxFeatures 1200 \
            --Vis/MinInliers 18 \
            --Mem/STMSize 100 \
            --RGBD/ProximityBySpace true \
            --RGBD/ProximityOdomGuess true \
            --RGBD/ProximityMaxGraphDepth 100 \
            --RGBD/LoopClosureReextractFeatures true \
            --Rtabmap/DetectionRate 0"/>
  </include>

  <!-- ============== Virtual Laser (dense, in base_link) ============== -->
  <group if="$(arg virtual_scan)">
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pc2scan" output="screen">
      <!-- Put scan in base_link so the local costmap sensor origin sits inside the window -->
      <param name="target_frame" value="camera_link"/>
      <param name="transform_tolerance" value="0.25"/>

      <!-- Vertical slice (meters in target frame Z) -->
      <param name="min_height" value="-10.0"/>
      <param name="max_height" value="0.6"/>

      <!-- HFOV ~ ±0.60 rad (≈±34°) -->
      <param name="angle_min" value="-0.60"/>
      <param name="angle_max" value="0.60"/>

      <!-- Timing & ranges -->
      <param name="scan_time" value="0.033"/>   <!-- ~30 Hz -->
      <param name="range_min" value="0.45"/>
      <param name="range_max" value="4.0"/>
      <param name="use_inf"   value="true"/>

      <remap from="cloud_in" to="/camera/depth_registered/points"/>
      <remap from="scan"     to="/scan"/>
    </node>
  </group>
</launch>