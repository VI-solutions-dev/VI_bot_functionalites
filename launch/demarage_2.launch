<launch>
  <!-- ================== ARGS ================== -->
  <arg name="model"                default="dd_robot6.urdf"/>
  <arg name="use_rtabmapviz"       default="true"/>
  <arg name="use_vo"               default="true"/>   <!-- visual odom node -->
  <arg name="use_ekf"              default="true"/>
  <arg name="virtual_scan"         default="true"/>
  <arg name="rviz_config"          default="$(find robot_diff)/urdf.rviz"/>
  <arg name="db_path"              default="$(env HOME)/.ros/rtabmap.db"/>

  <!-- ================== ROBOT DESCRIPTION ================== -->
  <param name="robot_description" textfile="$(find robot_diff)/urdf/$(arg model)"/>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

  <!-- ===== STATIC TF: base_link -> camera_link (EDIT the 6 numbers!) ===== -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="cam_tf"
        args="0.2 0 0.1 0 0 0 base_link camera_link"/>

  <node pkg="topic_tools" type="relay" name="grid_map_relay" output="screen" args="/rtabmap/grid_map /map" />
  <!-- ===== diff_tf disabled (don't publish odom->base_link) -->
  <node pkg="robot_diff" type="diff_tf.py" name="diff_tf" output="screen">
    <param name="publish_tf" value="false"/>
  </node>

  <!-- ===== Trajectory viz ===== -->
  <node name="robot_trajectory_visualization"
        pkg="robot_diff"
        type="trajectory_visualization.py"
        output="screen"/>

  <!-- ===== Rosbridge ===== -->
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">
    <arg name="port" value="9090"/>
  </include>

  <!-- ===== RViz ===== -->
  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(arg rviz_config)"
        required="true" />

  <param name="use_sim_time" value="false"/>

  <!-- ================== VISUAL ODOMETRY (rgbd_odometry) ================== -->
  <group if="$(arg use_vo)">
    <node pkg="rtabmap_odom" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <!-- Frames -->
      <param name="frame_id" value="base_link"/>
      <param name="odom_frame_id" value="odom_vo"/>
      <param name="publish_tf" value="false"/>

      <!-- Help VO stick using motion guess -->
      <param name="Odom/GuessMotion" value="true"/>

      <!-- Advanced VO tuning (from Advanced Parameter Tuning) -->
      <param name="Odom/Strategy" value="0"/>          <!-- F2F odometry -->
      <param name="Vis/CorType" value="0"/>            <!-- Optical flow -->
      <param name="OdomF2M/MaxSize" value="1000"/>     <!-- F2M feature buffer -->
      <param name="Vis/MaxFeatures" value="1000"/>      <!-- per-image features -->
      <param name="GFTT/MinDistance" value="40"/>      <!-- for ≥720p images -->
      <param name="Reg/Force3DoF" value="true"/>       <!-- planar odom -->
      <!-- Your thresholds/features kept -->
      <param name="Odom/MinInliers"  value="12"/>
      <param name="Vis/MinInliers"   value="12"/>
      <param name="Kp/MaxFeatures"   value="1500"/>
      <param name="Odom/FilteringStrategy"   value="1"/>
      <!-- Sync tuning -->
      <param name="approx_sync" value="true"/>
      <param name="approx_sync_max_interval" value="0.05"/>

      <!-- Auto reset after 1 bad frame -->
      <param name="Odom/ResetCountdown" value="20"/>

      <!-- Feed EKF odom as guess -->
      <remap from="odom" to="/odom"/>

      <!-- Camera topics -->
      <remap from="rgb/image"       to="/camera/rgb/image_color"/>
      <remap from="depth/image"     to="/camera/depth/image"/>
      <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
    </node>
  </group>

  <!-- ================== EKF (robot_localization) ================== -->
  <group if="$(arg use_ekf)">
    <node pkg="robot_localization"
          type="ekf_localization_node"
          name="ekf_odom"
          output="screen">
      <remap from="odometry/filtered" to="/odom"/>
      <rosparam file="$(find robot_diff)/params/ekf.yaml" command="load"/>
    </node>
  </group>

  <!-- ================== RTAB-Map SLAM ================== -->
  <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
  <!-- Camera topics -->
  <arg name="rgb_topic"         value="/camera/rgb/image_rect_color"/>
  <arg name="depth_topic"       value="/camera/depth_registered/image_raw"/>
  <arg name="camera_info_topic" value="/camera/rgb/camera_info"/>

  <!-- External odom (EKF publishes odom->base_link, RTAB-Map publishes map->odom) -->
  <arg name="icp_odometry" value="false"/>
  <arg name="odom_topic"   value="/odom"/>

  <!-- Frames -->
  <arg name="frame_id"      value="base_footprint"/>
  <arg name="odom_frame_id" value="odom"/>

  <!-- Sync (slightly looser to avoid dropped syncs) -->
  <arg   name="approx_sync" value="true"/>
  <arg   name="queue_size"  value="30"/>
  <param name="approx_sync_max_interval" value="0.12"/> <!-- was 0.05 -->

  <!-- ===== Planar SLAM (3-DoF) ===== -->
  <param name="Reg/Force3DoF"      value="true"/>
  <param name="Optimizer/Slam2D"   value="true"/>

  <!-- ===== Occupancy grid from depth (ground immediately free) ===== -->
  <!-- These replace/augment proj_* with RTAB-Map's Grid/* keys -->
  <param name="Grid/FromDepth"        value="true"/>     <!-- ensure using depth -->
  <param name="Grid/3D"               value="false"/>
  <param name="Grid/CellSize"         value="0.03"/>     <!-- 3 cm is a good balance; 0.02 can be noisy -->
  <param name="Grid/RangeMin"         value="0.20"/>     <!-- Kinect close limit -->
  <param name="Grid/RangeMax"         value="4.5"/>      <!-- Kinect v1 practical max -->

  <!-- Ground classification window (relative to base_link Z) -->
  <param name="Grid/MaxGroundAngle"   value="15"/>       <!-- was 10; 15 is safer if the robot pitches -->
  <param name="Grid/MinGroundHeight"  value="-0.10"/>    <!-- include slight negative due to noise -->
  <param name="Grid/MaxGroundHeight"  value="0.30"/>     <!-- capture floor even with tilt -->
  <param name="Grid/GroundIsObstacle" value="false"/>

  <!-- Denoising so you don't need multiple passes -->
  <param name="Grid/PreVoxelFiltering"          value="true"/>
  <param name="Grid/NoiseFilteringRadius"       value="0.08"/>  <!-- was 0.06 -->
  <param name="Grid/NoiseFilteringMinNeighbors" value="4"/>     <!-- was 10; too strict can erase ground -->
  <param name="Grid/NormalsSegmentation"        value="true"/>
  <param name="Grid/RayTracing"                 value="true"/>  <!-- clears freespace on first see -->

  <!-- Optional: if your camera is ~10–20° down-tilted, this combo classifies floor immediately -->

  <!-- ===== Features & VO robustness ===== -->
  <param name="Rtabmap/DetectionRate" value="0"/>        <!-- process all frames: OK -->

  <!-- Keep features strong but not overly strict -->
  <param name="Kp/MaxFeatures" value="1500"/>            <!-- 2500 is heavy; 1500 is plenty -->
  <param name="Kp/MaxDepth"    value="4.5"/>
  <param name="Vis/MinDepth"   value="0.1"/>
  <param name="Vis/MinInliers" value="18"/>              <!-- was 30; too high -> VO drops more often -->
  <param name="Vis/CorNNDR"    value="0.75"/>
  <param name="Odom/GuessMotion" value="true"/>          <!-- quick recovery when texture is poor -->
  <param name="Odom/ResetCountdown" value="1"/>          <!-- auto-reset VO on next frame if lost -->

  <!-- Neighbor refinement + ICP polishing (slightly looser distance) -->
  <param name="RGBD/NeighborLinkRefining" value="true"/>
  <param name="Icp/PointToPlane"          value="true"/>
  <param name="Icp/Iterations"            value="30"/>   <!-- 50 is heavy; 30 is usually enough -->
  <param name="Icp/MaxCorrespondenceDistance" value="0.10"/> <!-- was 0.05; Kinect depth noise needs ~10 cm -->

  <!-- Robust loop closures & optimization -->
  <param name="Rtabmap/LoopThr"       value="0.12"/>
  <param name="Optimizer/Robust"      value="true"/>
  <param name="Optimizer/Iterations"  value="150"/>      <!-- 200 -> 150 to reduce stalls -->
  <param name="RGBD/OptimizeMaxError" value="2.0"/>

  <!-- Spatial proximity loop closures (OK as you have) -->
  <param name="RGBD/ProximityBySpace"             value="true"/>
  <param name="RGBD/ProximityMaxGraphDepth"       value="50"/>
  <param name="RGBD/ProximityPathFilteringRadius" value="1.0"/>
  <param name="RGBD/ProximityMaxPaths"            value="3"/>

  <!-- Keep your DB/args -->
  <arg name="database_path" value="$(arg db_path)"/>
  <arg name="rtabmapviz"    value="$(arg use_rtabmapviz)"/>
  <arg name="rtabmap_args"  value="--delete_db_on_start \
                                   --Reg/Strategy 0 \
                                   --Vis/FeatureType 1 \
                                   --Kp/DetectorStrategy 4 \
                                   --Kp/MaxFeatures 1000"/>
</include>


  <!-- ================== Virtual Laser (PointCloud2 -> LaserScan) ================== -->
  <group if="$(arg virtual_scan)">
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pc2scan" output="screen">
      <param name="target_frame" value="camera_link"/>
      <param name="min_height" value="-0.10"/>
      <param name="max_height" value="0.30"/>
      <param name="angle_min"  value="-1.57"/>    <!-- wide FOV so you don't miss ground -->
       <param name="angle_max"  value="1.57"/>
      <param name="range_min" value="0.01"/>
      <param name="range_max" value="8.0"/>
      <remap from="cloud_in" to="/camera/depth_registered/points"/>
      <remap from="scan"     to="/scan"/>
    </node>
  </group>
</launch>
